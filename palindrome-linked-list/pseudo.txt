problem: is the linked list a palindrome?
container: singly linked list
member function: isPalindrome(ListNode*){}
return: boolean
base case: empty are not palindromes, single node list are palindromes
edge case: linked lists with two nodes must have identical values to be palindromes.
constraints: 0 <= node.val <= 9, and number of nodes in range [1,10^5]
pseudocode:
if head is nullptr return 0
else if head.next is nullptr return 1
else if head.val is head.next.val and head.next.next is nullptr return 1
//reverse the linked list
LinkedNode* curr := head
LinkedNode *prev:=NULL, *next:=NULL
while curr is not NULL do
next:=current.next
current.next:=prev
prev:=curr
curr:=next

LinkedNode* rev:=prev
for begin to end
if temp.val is not equal to head.val
	return 0;
return 1;

//reverse function in action
1. assign next node
2. reverse current node's pointer
3. advance previous and current node pointers by one

logical fallacy: wrong output; one test case failed

*****alternative solution*****
compare end of each half of the linked list using a vector:
isPalindrome(LinkedNode* head){
vector<int> vals;
while(head !=NULL){
vals.push_back(head->val);
head = head->next;
}
for(int i = 0; i<vals.size()/2;++i)
	if(vals[i] != vals[vals.size()-i-1])
		return false;
return true;
}

